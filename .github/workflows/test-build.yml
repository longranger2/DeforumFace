name: Test Build

on:
  workflow_dispatch:  # 只允许手动触发
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
        - ubuntu-latest
        - windows-latest
        - macos-latest

jobs:
  test-build:
    runs-on: ${{ github.event.inputs.platform }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies (Ubuntu)
      if: github.event.inputs.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Create hooks directory
      run: mkdir -p hooks

    - name: Create Streamlit hook (Windows)
      if: github.event.inputs.platform == 'windows-latest'
      run: |
        echo "from PyInstaller.utils.hooks import collect_data_files, collect_submodules" > hooks/hook-streamlit.py
        echo "" >> hooks/hook-streamlit.py
        echo "datas = collect_data_files('streamlit')" >> hooks/hook-streamlit.py
        echo "hiddenimports = collect_submodules('streamlit')" >> hooks/hook-streamlit.py

    - name: Create Streamlit hook (Unix)
      if: github.event.inputs.platform != 'windows-latest'
      run: |
        cat > hooks/hook-streamlit.py << 'EOF'
        from PyInstaller.utils.hooks import collect_data_files, collect_submodules

        datas = collect_data_files('streamlit')
        hiddenimports = collect_submodules('streamlit')
        EOF

    - name: Create PyInstaller spec file
      run: |
        cat > HeadAlignmentTool.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import os
        import site

        # 获取site-packages路径
        site_packages = site.getsitepackages()[0]

        block_cipher = None

        a = Analysis(
            ['run_streamlit.py'],
            pathex=[],
            binaries=[],
            datas=[
                ('streamlit_app.py', '.'),
                ('head_stabilizer.py', '.'),
                (os.path.join(site_packages, 'streamlit', 'static'), 'streamlit/static'),
                (os.path.join(site_packages, 'streamlit', 'runtime'), 'streamlit/runtime'),
                (os.path.join(site_packages, 'mediapipe', 'modules'), 'mediapipe/modules'),
            ],
            hiddenimports=[
                'streamlit',
                'streamlit.web.cli',
                'streamlit.runtime.scriptrunner.magic_funcs',
                'streamlit.runtime.caching.cache_data_api',
                'streamlit.runtime.metrics_util',
                'streamlit.components.v1.components',
                'streamlit.external.langchain',
                'mediapipe',
                'cv2',
                'numpy',
                'PIL',
                'PIL.Image',
                'PIL.ImageDraw',
                'PIL.ImageFont',
            ],
            hookspath=['hooks'],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='HeadAlignmentTool',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF

    - name: Build executable
      run: |
        pyinstaller HeadAlignmentTool.spec --clean --noconfirm

    - name: Test executable exists
      run: |
        ls -la dist/

    - name: Upload test artifact
      uses: actions/upload-artifact@v3
      with:
        name: test-build-${{ github.event.inputs.platform }}
        path: dist/HeadAlignmentTool*
        retention-days: 7 